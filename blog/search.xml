<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[在服务器安装 Node.js]]></title>
    <url>%2Fblog%2F2018%2F05%2F03%2Fserver-nodejs%2F</url>
    <content type="text"><![CDATA[在腾讯云服务器安装 Node.js 环境之前在狼叔的live群众，看到腾讯云有个活动，价格优惠果断入手了一台来玩玩，但是一直没有时间，今天就从安装开始吧！ 🤔🤔🤔 使用 ssh 远程连接服务器因为本人是使用 Windows 系统，所以需要下载一些终端工具（没有钱买MAC ☹️）。这样的工具挺多的，像 MobaXterm 和 Xshell个人比较喜欢 MobaXterm 看起来比较舒服。新建一个对话（session），填入你的服务器的 IP 地址和端口号，连接成功之后输入密码就可以了。 通过 shell 安装 Node.js12345678# 使用 wget 安装方式wget https://npm.taobao.org/mirrors/node/v8.11.1/node-v8.11.1-linux-x64.tar.xz# 解压xz -d node-v8.11.1-linux-x64.tar.xztar -xvf node-v8.11.1-linux-x64.tar# 建立软连接ln -s /node-v8.11.1-linux-x64/bin/node /usr/local/binln -s /node-v8.11.1-linux-x64/bin/npm /usr/local/bin 1. 连接到远程服务器在本地连接到远程的 Linux 服务器，可以使用相关工具，如 MobaXterm 或 Xshell 等软件，输入 IP 地址和端口号，连接之后输入密码即可。 2. 获取安装地址在 Node.js 中文网获取安装路径，选择自己服务器的系统和位数，可以通过 uname -a 命令查看到我的 Linux 系统位数是 64 位（x86_64表示64位系统，i686 i386表示32位系统）。安装的链接地址可以在官网上通过鼠标右键进行复制。 复制之后可以使用 wegt https://npm.taobao.org/mirrors/node/v8.11.1/node-v8.11.1-linux-x64.tar.xz shell 命令进行安装。安装前可以新建一个 app 目录安装到该目录下。 3. 解压如果安装包是以xz结尾的，那么解压主要分为两步：1) xz -d node-v8.11.1-linux-x64.tar.xz2) tar -xvf node-v8.11.1-linux-x64.tar 4. 建立软连接其实到这一步，已经算是安装完成了，使用 node -v 和 npm -v 可以查看到安装的版本，但是在全局环境下会发现报错，所以需要建立软连接，就是将 Nodejs 安装 bin 目录下的可执行文件链接到 /usr/local/bin 或 /usr/bin 目录下。 12ln -s /node-v8.11.1-linux-x64/bin/node /usr/local/binln -s /node-v8.11.1-linux-x64/bin/npm /usr/local/bin 建立软连接成功之后，在全局环境下也可以执行 node 的相关命令了。 踩坑在使用 ssh 方式连接服务器是发现怎么都连不上，一直报连接超时错误，ping 又是通的，换了其它连接工具发现也不行，上网搜试过也不行，然后通过求助腾讯云客服，最后竟然是学校网络的问题. 🔪🔪🔪]]></content>
      <categories>
        <category>菜鸟成长记</category>
      </categories>
      <tags>
        <tag>服务器</tag>
        <tag>Nodejs</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Win10 使用多桌面提升开发效率]]></title>
    <url>%2Fblog%2F2018%2F05%2F01%2FWin10-split-screen%2F</url>
    <content type="text"><![CDATA[巧用 Win10 分屏功能一般我会新建三个桌面，一个看文档，一个写代码，另一个看调试结果。虽然可以在一个桌面中直接使用 ALT + TAB 组合键来进行切换，但是软件多起来就会发现很乱。使用分屏会更加简洁方便。在切换桌面可以使用 WGestures 软件，通过鼠标触碰桌面的左上角和右上角来进行切换上下桌面。安装后可以设置一下快捷键，当然也可以直接通过Win+Ctrl+Left/Right组合键来切换。如图：vscode 使用全屏模式，左边的桌面可以查看文档，查资料，右边的桌面查看调试结果，中间的写代码，是不是很爽 😄这里推荐一个 vscode 插件 Live Server，通过点击右下角的Go Live按钮，可以在本地启动一个服务器，同时他支持热更新，直接保存就可以刷新页面。在编辑器中编辑之后直接保存，在浏览器中会自动刷新页面。]]></content>
      <categories>
        <category>折腾记</category>
        <category>工具技巧</category>
      </categories>
      <tags>
        <tag>折腾记</tag>
        <tag>Windows</tag>
        <tag>WeGrestures</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Flex 布局（二）]]></title>
    <url>%2Fblog%2F2018%2F04%2F04%2Fflex-layout-2%2F</url>
    <content type="text"><![CDATA[Flex 属性Flex 容器属性 容器属性 描述 flex-direction 决定主轴的方向（即项目的排列方向） flex-warp 定义是否新行显示，以及新行的排列方向 flex-flow 是 flex-direction 和 flex-wrap 的简写方式 justify-content 定义了项目在主轴上的对齐方式 align-items 定义弹性项目在侧轴上的对齐方式 align-content 定义多行在侧轴的对齐方式，当只有一行时，不起作用 Flex 项目属性 项目属性 描述 order 数字，定义弹性项目的显示顺序，数字越小越靠前 flex-grow 数字，定义弹性项目的放大比例，默认 0 flex-shrink 数字，定义弹性项目的缩小比例，默认 1，值 0 表示不缩小 flex-basis 数字，定义弹性项目的默认尺寸 flex flex-grow flex-shrink flex-basis` 的缩写，默认值为 0 1 auto align-self 定义此弹性项目本身的对齐方式，会覆盖弹性容器align-items 定义的对齐方]]></content>
      <categories>
        <category>Web</category>
        <category>Flexbox</category>
      </categories>
      <tags>
        <tag>Web</tag>
        <tag>前端</tag>
        <tag>CSS布局</tag>
        <tag>Flexbox</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Flex 布局（一）]]></title>
    <url>%2Fblog%2F2018%2F03%2F09%2Fflex-layout%2F</url>
    <content type="text"><![CDATA[认识 Flex背景目前主要的前端布局方案主要有三种： 传统布局方案（通过浮动、定位等方式实现） Flex 布局方案 Grid 布局方案 传统的布局方案，需要熟练掌握元素的分类及布局特性、浮动原理和定位原理等基础知识，学习成本较大，实现的复杂度也比较高。Flex 布局方案，真是为了解决传统布局方案的不变，而提出的一种新型布局方案，只需要简单通过对父元素和子元素相关规则配置就能实现效果。Flex 布局的主要思想是使父元素能够调节子元素的高度、宽度和排布的顺序，从而能够最好地适应可用布局空间（能够适应不同的设备和不同大小的屏幕）。设定为flex布局的元素能够放大子元素使之尽可能填充可用空间，也可以收缩子元素使之不溢出。与传统布局中块状元素按照垂直方向摆放，行内元素按照水平方向摆放相比，Flex 布局是无方向的,传统布局在应对大型复杂的布局时缺乏灵活性，特别是在改变方向、改变大小、伸展、收缩等等方面。Flex 布局适合小规模的布局方案，而 Grid 布局方案适合大规模的布局方案。Flex 布局的兼容性：总的来说，Flex 布局方案是未来的首选布局方案。 基本概念采用 Flex 布局的元素，称为 Flex 容器（flex container），简称为“容器”。它的所有子元素自动成为容器成员，称为 Flex 项目（flex item），简称”项目”。容器中存在两条轴：主轴(main axis) 和 交叉轴(cross axis)。主轴 开始的位置为 main start，结束的位置为 main end；交叉轴开始的位置为 cross start ，结束的位置为 cross end。项目默认沿主轴排列。单个项目占据的主轴空间叫做 main size，占据的交叉轴空间叫做 cross size。相关概念： main axis：Flex 容器的主轴。主要用来配置 Flex 项目。注意，它不一定是水平的，主要取决于 flex-direction 属性。 main start | main end：Flex 项目的配置从容器的主轴起点边开始，往主轴终点边结束。 main size：Flex项目的在主轴方向的宽度或高度就是项目的主轴长度，Flex项目的主轴长度属性是width或height属性，由哪一个对着主轴方向决定。 cross axis：与主轴垂直的轴称作侧轴，是侧轴方向的延伸。 cross start | cross end：伸缩行的配置从容器的侧轴起点边开始，往侧轴终点边结束。 cross size：Flex 项目在侧轴方向的宽度或高度就是项目的侧轴长度，Flex项目的侧轴长度属性为width或height属性，有哪一个对着侧轴方向决定。 Flex 属性Flex 属性主要分为两种，Flex 容器属性 和 Flex 项目属性。父容器可以设置子容器的排列方式，子容器也可以单独设置自身的排列方式，如果两者同时设置，以子容器的设置为准。Flex 容器属性： flex-direction flex-warp flex-flow justify-content align-items align-content Flex 项目属性 order flex-grow flex-shrink flex-basis flex align-self 参考资料CSS Flexible Box LayoutFlex 布局教程：语法篇一个完整的Flexbox指南一劳永逸的搞定 flex 布局]]></content>
      <categories>
        <category>Web</category>
        <category>Flexbox</category>
      </categories>
      <tags>
        <tag>Web</tag>
        <tag>前端</tag>
        <tag>CSS布局</tag>
        <tag>Flexbox</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[简单 HTTP 协议]]></title>
    <url>%2Fblog%2F2018%2F02%2F01%2FHttp-Chapter-2%2F</url>
    <content type="text"><![CDATA[简单的 HTTP 协议1. HTTP 协议用于客户端与服务端之间的通信请求访问文本或图像等资源的一端称为客户端，而提供资源响应的一端称为服务器端。在两台计算机之间使用 HTTP 协议通信时，在一条通信线路上必定有一端是客户端，另一端则是服务器端。 2. 通过请求和响应的交换达成通信2.1 请求报文–客户端请求报文是由请求方法、请求 URI、协议版本、可选的请求首部字段和内容实体构成的。 2.2 响应报文–服务端响应报文基本上由协议版本、状态码（表示请求成功或失败的数字代码）、用以解释状态码的原因短语、可选的响应首部字段以及实体主体构成。 3. HTTP 是不保存状态的协议HTTP 是一种不保存状态，即无状态（stateless）协议。HTTP 协议自身不对请求和响应之间的通信状态进行保存。也就是说在HTTP这个级别，协议对于发送过的请求或响应都不做持久化处理。HTTP/1.1 虽然是无状态协议，但为了实现期望的保持状态功能，于是引入了 Cookie 技术。有了 Cookie 再用HTTP协议通信，就可以管理状态了。 4. 请求 URI 定位资源 5. 告知服务器意图的 HTTP 方法 GET：获取资源 &#x1f447; POST：传输实体主体 &#x1f447; PUT：传输文件 &#x1f447; HEAD：获得报文首部 &#x1f447; DELETE：删除文件 &#x1f447; OPTIONS：询问支持的方法 &#x1f447; TRACE：追踪路径 &#x1f447; CONNECT：要求用隧道协议连接代理 &#x1f447; 5.1 GET：获取资源GET 方法用来请求访问已被 URI 识别的资源。指定的资源经服务器端解析后返回响应内容。 5.2 POST：传输实体主体POST 方法用来传输实体的主体。相对于 GET 方法的“我想要向服务器访问某个资源” POST 方法则是“我要把这条信息告诉给服务器”。 5.3 PUT：传输文件PUT 方法用来传输文件。就像 FTP 协议的文件上传一样，要求在请求报文的主体中包含文件内容，然后保存到请求URI 指定的位置。 5.4 HEAD：获得报文首部用于确认 URI 的有效性及资源更新的日期时间等。 5.5 DELETE：删除文件DELETE 方法用来删除文件，是与 PUT 相反的方法。DELETE 方法按请求 URI 删除指定的资源。 5.6 OPTIONS：询问支持的方法OPTIONS 方法用来查询针对请求 URI 指定的资源支持的方法。 5.7 TRACE：追踪路径TRACE 方法是让 Web 服务器端将之前的请求通信环回给客户端的方法。但是，TRACE 方法本来就不怎么常用，再加上它容易引发 XST（Cross-Site Tracing，跨站追踪）攻击，通常就更不会用到了。 5.8 CONNECT：要求用隧道协议连接代理CONNECT 方法要求在与代理服务器通信时建立隧道，实现用隧道协议进行 TCP 通信。主要使用 SSL（Secure Sockets Layer，安全套接层）和 TLS（Transport Layer Security，传输层安全）协议把通信内容加密后经网络隧道传输。12// CONNCET 格式CONNCET 代理服务器名：端口号 HTTP版本 6. 持久连接节省通信量在 HTTP 的初始版本中，每进行一次 HTTP 通信就要断开一次 TCP 连接。这对于一些容量很小的问本传输没有多大问题，但是随着 HTTP 的普及，文档中的文本和图片越来越多，每次请求都会造成无谓的 TCP 连接和断开，增加通信量的开销。这对于一些容量很小的问本传输没有多大问题，但是随着 HTTP 的普及，文档中的文本和图片越来越多，每次请求都会造成无谓的 TCP 连接和断开，增加通信量的开销。 6.1 持久连接为了解决上述的问题，出现了持久链接的方法（HTTP Persistent Connections，也称为HTTP keep-alive 或 HTTP connection reuse）的方法。特点是，只要任意一端没有明确提出断开连接，则保持 TCP 连接。 6.2 管线化管线化技术：持续连接使得多数请求以管线化方式发送。这样可以做到同时并行发送多个请求，而不需要一个接一个地等待响应了。 7. 使用Cookie 的状态管理HTTP Cookie（也叫Web Cookie或浏览器Cookie）是服务器发送到用户浏览器并保存在本地的一小块数据，它会在浏览器下次向同一服务器再发起请求时被携带并发送到服务器上。通常，它用于告知服务端两个请求是否来自同一浏览器，如保持用户的登录状态。Cookie使基于无状态的HTTP协议记录稳定的状态信息成为了可能。Cookie 主要用于三个方面： 会话状态管理（如用户登录状态、购物车、游戏分数或其它需要记录的信息） 个性化设置（如用户自定义设置、主题等） 浏览器行为跟踪（如跟踪分析用户行为等） 参考：《HTTP cookies》《聊一聊 cookie》]]></content>
      <categories>
        <category>Web</category>
        <category>HTTP</category>
        <category>图解HTTP-笔记</category>
      </categories>
      <tags>
        <tag>Web</tag>
        <tag>前端</tag>
        <tag>HTTP</tag>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[了解 Web 及网络基础]]></title>
    <url>%2Fblog%2F2018%2F02%2F01%2FHttp-Chapter-1%2F</url>
    <content type="text"><![CDATA[了解 Web 及网络基础使用 HTTP 协议访问 Web当我们使用浏览器时，在地址栏输入www.baidu.com后，页面信息是如何呈现的呢？其实当我们在地址栏输入URL后，浏览器就会从服务器获取文件资源等信息，然后显示到浏览器上面。就比如，卖家在网上买东西，选购填写自己的地址信息后，然后卖家会根据你的地址通过快递公司发货给你，地址信息就相当于URL，卖家就相当于服务器，买家就相当于浏览器，快递公司就相当于传输协议（HTTP协议）。HTTP（HyperText Transfer Protocol，超文本传输协议，严谨来说应该叫超文本转移协议），完成从客户端到服务端等一系列运作流程。可以说，Web 是建立在 HTTP 协议上通信的。 网络基础 TCP/IPTCP/IP 协议族协议: 不同的硬件、操作系统之间的通信规则。TCP/IP: 与互联网相关的协议的集合。 TCP/IP 分层管理 应用层：决定了向用户提供应用服务时通信的活动 传输层：对上层应用层，提供处于网络连接中的两台计算机之间的数据传输 网络层（网络互连层）：处理在网络上流动的数据包 链路层（数据链路层，网络接口层）：处理连接网络的硬件部分 TCP/IP 通信传输流利用 TCP/IP 协议族进行网络通信时，会通过分层顺序与对方进行通信。发送端从应用层往下走，接收端则往应用层往上走。发送端在层与层之间传输数据时，每经过一层时必定会被打上一个该层所属的首部信息。反之，接收端在层与层传输数据时，每经过一层时会把对应的首部消去。这种把数据包装起来的做法称为封装。 与HTTP 关系密切的协议：IP、TCP 和 DNS负责传输的 IP 协议IP是一种协议的名称；IP地址是一串数字。IP协议的作用是把各种数据包传送给对方。IP 地址和 MAC 地址时确保传输到对方的两个重要条件。在网络上，通信的双方在同一局域网（LAN）内的情况是很少的，通常是经过多台计算机和网络设备中转才能连接到对方。而在进行中转时，会利用下一站中转设备的 MAC 地址来搜索下一个中转目标。这时，会采用 ARP 协议（Address Resolution Protocol）。ARP 是一种用以解析地址的协议，根据通信方的IP 地址就可以反查出对应的 MAC 地址。 确保可靠性的 TCP 协议为了准确无误地将数据送达目标处，TCP 协议采用了三次握手（three-way handshaking）策略。 负责域名解析的 DNS 服务DNS（Domain Name System）服务是和HTTP协议一样位于应用层的协议。它提供域名到 IP 地址之间的解析服务。 各种协议与 HTTP 协议的关系 URI 和 URLURI：统一资源标识符(Uniform Resource Indentifier)用来标识服务器上的资源。URL:统一资源定位符(Uniform Resouce Locator)是资源标识符最常见的表示格式。URL时URI的子集。区别：URI 定义资源，而 URL 不单定义这个资源，还定义了如何找到这个资源（即访问资源的方式）。 参考：《HTTP 协议中 URI 和 URL 有什么区别？》 绝对 URI 格式 参考：《图解HTTP》]]></content>
      <categories>
        <category>Web</category>
        <category>HTTP</category>
        <category>图解HTTP-笔记</category>
      </categories>
      <tags>
        <tag>Web</tag>
        <tag>前端</tag>
        <tag>HTTP</tag>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Windows 下使用tree命令生成目录树]]></title>
    <url>%2Fblog%2F2018%2F01%2F29%2FWindows-tree%2F</url>
    <content type="text"><![CDATA[了解在看Vue.js的官方文档时，看到了这样的目录图，当时就好奇这是怎么写出来的，是由专门的语法还是通过手打出来的，于是就上网查找，发现原来这是通过tree命令来实现。 查找tree命令格式:TREE [drive:][path] [/F] [/A] /F 显示每个文件夹中文件的名称。使用时显示所有目录及目录下的所有文件，省略时，只显示目录，不显示目录下的文件;/A 使用 ASCII 字符，而不使用扩展字符。 在 Linux 和 Mac OS 系统中tree命令有更强大的功能，但在Windows下只有 /F /A 实践OK，Let’s do it now ! 😄首先，建立相关的测试文件夹然后在DOS中进入目录 E:\test&gt;输入相关命令，你可以选择在DOS中直接显示，也可以存为txt文件12tree /f // 直接显示tree /f &gt; tree.txt // 存为txt文件 结果：之后就可以复制其中的内容了1234567└─ToDoList ├─ToDoItem │ ├─DeleteToDoButton │ └─EditToDoButton └─ToDoListFooter ├─ClearToDoButton └─ToDoListStatistics]]></content>
      <categories>
        <category>折腾记</category>
        <category>工具技巧</category>
      </categories>
      <tags>
        <tag>折腾记</tag>
        <tag>windows</tag>
        <tag>tree命令</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[JavaScript知识点（一）]]></title>
    <url>%2Fblog%2F2017%2F12%2F02%2FJavaScript%2F</url>
    <content type="text"><![CDATA[变量类型及计算题目1. JS中用 typeof 得到那些数据类型12345678typeof undefined // undefinedtypeof '123' // stringtypeof 123 // numbertypeof true // booleantypeof &#123;&#125; // objecttypeof [] // objecttypeof null // objecttypeof console.log() //function typeof 只能区分值类型 2. 何时使用 == 和 ===12345678910111213if (obj.a == null) &#123; /* 这里相当于 obj.a === null || obj.a === undefined, 简写形式 这是jQuery源码的推荐写法 除此之外都是用 === */&#125;function (a, b) &#123; if (a == null) &#123; // 这里也可以使用 == ,但是 == 之前的变量必须要有定义 &#125;&#125; ‘’(空字符串), 0, null, undefined都可以转换为 false 3. JS中的内置函数–数据封装对象123456789ObjectNumberStringBooleanFunctionArrayDateRegExpError 4. JS变量按存储方式区分为那些类型，并描述其特点 值类型 1234var a = 100;var b = a;a = 200;console.log(b) // 100 引用类型：对象、数组、函数（节省内存空间，以指针方式存储） 1234var obj1 = &#123;x: 20&#125;;var obj2 = obj1;obj1.x = 30;console.log(obj2.x) // 30 5. 如何理解JSONJSON只是JS的一个内置对象，Math也是12JSON.stingify(&#123;a: 10, b: 20&#125;) // 对象 -&gt; 字符串JSON.parse("&#123;'a': 10, 'b': 20&#125;") // 字符串 -&gt; 对象 原型和原型链知识点 构造函数 构造函数 - 扩展 原型规则和示例 原型链 instanceof 构造函数123456789function Foo(name, age) &#123; this.name = name; this.age = age; this.class = 'class one'; //return this //默认有这一行&#125;// 创建多个对象var f1 = new Foo('zhansan', 12);var f2 = new Foo('lise', 13); 构造函数的扩展 var a = {} 其实是 var a = new Object() 的语法糖 var a = [] 其实是 var a = new Array() 的语法糖 function Foo() {...} 其实是 var Foo = new Funcion() {...} 的语法糖 使用 instanceof 判断一个函数是否是一个变量的构造函数 原型规则和实例 所有的引用类型（对象、数组、函数），都具有对象特性，即可自由扩展属性（除了”null”以外 所有的引用类型（对象、数组、函数），都有一个proto(隐式原型)属性，属性值是一个普通对象 所有的函数，都有一个prototype(显示原型)属性，属性值是一个普通对象 所有的引用类型（对象、数组、函数），proto属性值指向它的构造函数的 prototype 属性值 当试图寻找一个对象（引用类型）的某个属性时，如果这个对象本身没有这个睡醒，那么会去它的proto（即它的构造函数的prototype）中去寻找 12345678910111213141516171819// 所有的引用类型都有可自由扩展属性var obj = &#123;&#125;;obj.a = 100;var arr =[];arr.a = 200;function fn() &#123;&#125;;fn.a = 100;// 所有的引用类型都有一个默认的隐式原型属性console.log(obj._proto_);console.log(arr._proto_);console.log(fn._proto_);// 所有的函数都有一个显示原型的属性console.log(fn.prototype);// 所有引用类型的_proto_属性值指向它的构造函数的prototype属性值console.log(obj._proto_ === Object.prototype); 1234567891011121314151617181920212223242526272829303132// 构造函数function Foo(name, age) &#123; this.name = name;&#125;Foo.prototype.alertName = function () &#123; alert(this.name);&#125;// 创建实例var f = new Foo('zhangsan');f.printName = function () &#123; console.log(this.name);&#125;// 测试f.alertName();f.printName();// 循环对象自身的属性var item;for (item in f) &#123; /* 高级浏览器已经在 for in 中屏蔽了来自原型的属性 但还是建议加上下面这个判断，保证程序的健壮性 */ if (f.hasOwnProperty(item)) &#123; console.log(item); &#125;&#125;// 原型链f.toString() // 要去 f._proto_._proto_ 中查找 instanceof用于判断引用类型属于哪个构造函数的方法f intanceof Foo 的判断逻辑： f.proto 一层一层往上，能否对应到 Foo.prototype 再试着判断 f instanceof Object 同样在 f.proto 一层一层往上找，直到 Object.prototype 题目1. 如何准确判断一个变量是数组类型123var arr = [];arr instanceof Array; // truetypeof arr; // Object, typeof 是无法判断是否为数组的 2. 写一个原型链继承的例子1234567891011121314151617// 动物function Animal() &#123; this.eat = function () &#123; console.log('Animal eat'); &#125;&#125;// 狗function Dog() &#123; this.bark = function () &#123; console.log('dog bark'); &#125;&#125;Dog.prototype = new Animal();// 哈士奇var hashiqi = new Dog();hashiqi.eat();hashiqi.bark(); 面试中千万不要上面的例子，应该写更加贴近实战的例子，上面这个例子只是用来理解。 一个封装DOM查询的例子12345678910111213141516171819function Elem(id) &#123; this.Elem = document.getElementById(id);&#125;Elem.prototype.html = function (val) &#123; var elem = this. Elem; if (val) &#123; elem.innerHTML = val; return this &#125; else &#123; return elem.innerHTML &#125;&#125;Elem.prototype.on = function (type, fn) &#123; var elem = this.Elem; elem.addEventListener(type, fn); return this&#125;var div1 = new Elem('div1');div.html('&lt;p&gt;hello&lt;/p&gt;').on('click', function () &#123;alert('clicked')&#125;).html('&lt;p&gt;JavaScript&lt;/p&gt;'); 3. 描述 new 一个对象的过程 创建一个新对象 this 指向这个新对象 执行代码，即对 this 进行赋值 返回 this 4. zepto(或其他框架)源码中如何使用原型链 阅读源码是高效提升技能的方式 但不能“埋头苦研”有技巧在其中，阅读之前在网上先搜索一下资料]]></content>
      <categories>
        <category>Web</category>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>Web</tag>
        <tag>前端</tag>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello-Hexo]]></title>
    <url>%2Fblog%2F2017%2F11%2F05%2FHello-Hexo%2F</url>
    <content type="text"><![CDATA[Hexo官网地址：https://hexo.io/ 安装 nodejs 和 git在使用Hexo之前，必须要先安装node.js和Git,下载完之后和一般安装软件一样点击下一步就可以。安装完之后打开命令提示符或者 WIN + R 输入 cmd,输入 node -v,若成功则下图所示: 在开始菜单中找到 Git -&gt; Git Bush,则安装成功。 安装Hexo在Hexo官网中，可查看相关命令来进行下载安装，通过文档来进行使用，简单易上手。 123456# Hexo使用命令$ npm install hexo-cli -g #在全局下安装`hexo-cli`$ hexo init blog #在当前地址创建`blog`文件$ cd blog #进入到`blog`文件中$ npm install #使用`npm`进行安装$ hexo server #在本次启动服务器进行预览 安装完之后可以在blog文件夹中看到相关文件:具体使用可查看Hexo官方文档 Hexo部署到Github在Github上注册账号新建 username.github.io 仓库进入Github网站，输入你的账号密码后点击 New repository 点击完之后，填写相关信息创建该仓库 在本地生成静态文件123$ hexo new "post-name" //新建一片文章$ hexo genernate //生成静态文件在public文件家中$ hexo deploy //上传到GitHub上 在每次 hexo g 前最好先使用 hexo clean 使用 hexo deploy 上传到GitHub可能会出现22号端口链接错误，需要进行git配置： 生成 ssh密钥 在你的GitHub账户中添加生成的ssh密钥 在本地的 ~/.ssh文件夹中建立 config 文件，并添加：123Host github.com Hostname ssh.github.com Port 443 在上传之前需要在 站点配置文件 中修改地址12url: http://zyycode.github.ioroot: / 使用GitHub Desktop上传下载Github Desktop选择 file -&gt; clone repository 在本地创建仓库后，然后将你 public 文件夹中的文件拷贝中刚克隆的 zyycode.github.io 文件中。 在浏览中输入域名访问网站完成之后就可以在浏览器中输入https://zyycode.github.io/就可以查看你的博客了 Hexo进阶使用Hexo更改主题 我使用的是Next主题 在Hexo主题 选择你喜欢的主题，可以选择 git 下载 或者直接克隆下载文件到你的 ~\blog\themes 目录下,同时在 站点配置文件 中修改。1theme: next 添加分类页面和标签页面12$ hexo new page categories$ hexo new page tags 新建分类页面新建标签页面 搜索功能评论功能赞赏功能腾讯404工艺页面]]></content>
      <categories>
        <category>Hexo建站</category>
      </categories>
      <tags>
        <tag>建站</tag>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Shadowsocks Setup]]></title>
    <url>%2Fblog%2F2017%2F10%2F20%2FShadowsocks-setup%2F</url>
    <content type="text"><![CDATA[搬瓦工服务器搭建与使用花费了一天的时间来搭建搬瓦工服务器一家Shadowsocks的配置，主要过程为： 购买 搬瓦工服务器 国内镜像网站! 在服务器上使用一键安装Shadowsocks功能 客户端上安装Shadosocks软件 购买BandwagongHost（俗称搬瓦工）服务器购买时选择KVM架构的服务器，因为可以选择安装centos-6-x86_64-bbr 系统（默认安装，加速），同时还可以选择其他加速方式，两者的主要区别是：OpenVZ advantages: IPv6 support Better CPU performanceKVM advantages: Full virtualization Custom kernel support (BBR, etc) Docker support Better isolation Better network throughput点击购买就可以了,可以选择支付宝付款。购买成功之后会选择发送邮件到你注册时使用的邮箱中，具体信息可以登入到网站中查看在服务器中先选择安装系统，最好安装centos-6 x86系统，然后可以选择一件安装Shadowsocks Server,安装完之后会显示端口、密码等相关信息，这些信息是填写客户端（PC端）上面。客户端安装Shadowsockswindows版安装就和平时安装软件一样，点击下一步就可以，安装完之后填写服务器、密码、端口号相关信息就可以了。下载地址：官方下载页]]></content>
      <categories>
        <category>技术</category>
        <category>VPS Shadowsocks</category>
      </categories>
      <tags>
        <tag>技术</tag>
        <tag>VPS Shadowsocks</tag>
      </tags>
  </entry>
</search>
